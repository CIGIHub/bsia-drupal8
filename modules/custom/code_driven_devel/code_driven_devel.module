<?php

/**
 * @file
 * Code-driven development's functions
 */
use Drupal\Component\Serialization\Yaml;
use Drupal\Core\Extension\InfoParser;

/**
 * Updates dependencies based on the info file.
 *
 * If during the course of development, you add a dependency to your
 * module's .info file, increment the update hook
 * (see the .install module) and this function will be called, making
 * sure dependencies are enabled.
 */
function code_driven_devel_update_dependencies() {
  $parser = new InfoParser;
  $info_file = $parser->parse(drupal_get_path('module', 'code_driven_devel') . '/code_driven_devel.info.yml');
  if (isset($info_file['dependencies'])) {
    \Drupal::service('module_installer')->install($info_file['dependencies'], TRUE);
  }
}

/**
 * Get the configured UUID of this website from the configuration YML files.
 *
 * @param $config_name
 *   The name of the configuration directory to use, for example 'sync'.
 */
function code_driven_devel_get_site_uuid_from_config($config_name) {
  $dir = \Drupal::root() . '/' . config_get_config_directory($config_name) . '/';
  $file = 'system.site.yml';
  $info = Yaml::decode(file_get_contents($dir . $file));
  $uuid = $info['uuid'];

  return $uuid;
}

/**
 * Set the UUID of this website.
 *
 * By default, reinstalling a site will assign it a new random UUID, making
 * it impossible to sync configuration with other instances. This function
 * is called by site deployment module's .install hook.
 *
 * @param $uuid
 *   A uuid string, for example 'e732b460-add4-47a7-8c00-e4dedbb42900'.
 */
function code_driven_devel_set_site_uuid($uuid) {
  \Drupal::configFactory()->getEditable('system.site') // After Jan. 16th, 2015, see [Nathanael's comment](http://dcycleproject.org/comment/2603#comment-2603)
  // \Drupal::config('system.site') // Before Jan. 16th, 2015
    ->set('uuid', $uuid)
    ->save();
}

/**
 * Override all local UUIDs with the configured UUIDs for this website.
 *
 * @param $config_name
 *   The name of the configuration directory to use, for example 'sync'.
 */
function code_driven_devel_override_uuids($config_name) {

  // We need to parse all uuids from configuration directory and override local uuids
  $dir = \Drupal::root() . '/' . config_get_config_directory($config_name) . '/';
  $files = scandir($dir);

  foreach($files as $file) {
    $ext = substr($file, -4);
    if ($ext == '.yml') {
      $info = Yaml::decode(file_get_contents($dir . $file));
      $name = substr($file, 0, -4);
      if(is_array($info) && array_key_exists('uuid', $info)) {
        if(in_array($name, \Drupal::configFactory()->listAll())) {
          \Drupal::configFactory()
            ->getEditable($name)
            ->set('uuid', $info['uuid'])
            ->save();
        }
      }
    }
  }
}

/**
 * Override all custom block UUIDs with the configured UUIDs for this website.
 *
 * @param $config_name
 *   The name of the configuration directory to use, for example 'sync'.
 */
function code_driven_devel_override_block_uuids($config_name) {

  // We need to parse all uuids from deploy dir and override local uuids
  $dir = \Drupal::root() . '/' . config_get_config_directory($config_name) . '/';
  $files = scandir($dir);

  \Drupal\Core\Database\Database::setActiveConnection();
  $connection = \Drupal\Core\Database\Database::getConnection();

  $logger = \Drupal::logger('code_driven_devel');

  // Gather all 'block_content' blocks; store the label and uuid
  $labelled_blocks_to_uuids = array();
  $labels = array();
  foreach($files as $file) {
    $ext = substr($file, -4);
    if ($ext == '.yml') {
      $info = Yaml::decode(file_get_contents($dir . $file));
      $name = substr($file, 0, -4);
      $isblock = substr($name, 0, 5);
      if($isblock == 'block') {
        if(is_array($info) && array_key_exists('settings', $info)) {
          $id = $info['settings']['id'];
          $id_parts = explode(':', $id);
          if ($id_parts[0] == 'block_content') {
            $uuid = $id_parts[1];
            $label = $info['settings']['label'];
            if (strlen($label) > 0) {
              $labelled_blocks_to_uuids[$label] = $uuid;
              array_push($labels, $label);
            }
          }
        }
      }
    }
  }
  $logger->notice(t("Found " . count($labels) . " block_content config YML that may need to have their UUIDs synched..."));
  var_dump($labelled_blocks_to_uuids);
  var_dump($labels);
  // Fetch block IDs using the block 'label'
  $results = $connection->select('block_content_field_data', 't')
    ->fields('t')
    ->condition('info', $labels, 'IN')
    ->execute();
  // Update the block 'uuid' based on the value expected in the config YMLs
  if ($results) {
    foreach ($results as $record) {
      $logger->notice(t("Updating UUID for block_content with id = " . $record->id . "..."));
      var_dump($record->id);
      $uuid = $labelled_blocks_to_uuids[$record->info];
      $connection->update('block_content')
        ->fields(array(
            'uuid' => $uuid,
            ))
        ->condition('id', $record->id, '=')
        ->execute();
      $logger->notice(t("UUID for block_content with id = " . $record->id . " updated to " . $uuid));
    }
  }
}
