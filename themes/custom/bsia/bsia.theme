<?php

function bsia_theme_suggestions_block_alter(&$suggestions, $variables) {
  $content = $variables['elements']['content'];
  if (isset($content['#block_content']) && $content['#block_content'] instanceof \Drupal\block_content\BlockContentInterface) {
    $suggestions[] = 'block__' . $content['#block_content']->bundle();
  }
}

// function bsia_preprocess_page(&$variables){

// 	kint($variables);
// 	dsm($variables['contexts']);
// }


function bsia_preprocess_field(&$variables, $hook) {
 	
 	if($variables['field_name'] === 'field_event_date'){
 		$variables['start_date'] = null;
 		$variables['end_date'] = null;

 		foreach($variables['items'] as $key=>$value){
			if($key == 0){
				$variables['start_date'] = $variables['items'][$key]['content']['#text'];
			}
			if($key == 1){
				$variables['end_date'] = $variables['items'][$key]['content']['#text'];
			}
		}
 	}	 
}

function bsia_preprocess_node(&$variables){

/* Preprocess logic for news nodes */
	if( $variables['node']->getType() === 'news' || ($variables['node']->getType() === 'news' && $variables['view_mode'] === 'teaser')){
		
		$news_date = strtotime($variables['node']->field_news_date->getValue()[0]['value']);
		$variables['news_date_month'] = format_date($news_date, 'custom', 'M');
		$variables['news_date_day'] = format_date($news_date, 'custom', 'd');
		$variables['news_date_year'] = format_date($news_date, 'custom', 'Y');

	}

/* Preprocess logic for research nodes */
	if($variables['node']->getType() === 'research'){

		$variables['members_string'] = speakers_or_authors($variables['node']->field_speakers, $variables['node']->field_speakers_unlinked, ' / ');
	}

/* Preprocess logic for person nodes */

	if($variables['node']->getType() === 'person'){
		if($variables['node']->field_website->getValue()){
			$variables['website'] = $variables['node']->field_website->getValue()[0]['value'];
		}
	
		//set flag for person types
		$variables['staff'] = false;
		$variables['faculty'] = false;
		$variables['cigi_chair'] = false;
		$variables['program_director'] = false;
		$variables['student'] = false;
		$variables['postdoc_fellow'] = false;
		$variables['graduate'] = false;
		$variables['visiting_fellow'] = false;
		$variables['bsia_fellow'] = false;
		$variables['board_member'] = false;



		foreach($variables['node']->person_type->getValue() as $key=>$value){

			if($variables['node']->person_type->getValue()[$key]['target_id'] == 1){
				$variables['staff'] = true;
			}
			if($variables['node']->person_type->getValue()[$key]['target_id'] == 2){
				$variables['faculty'] = true;
			}
			if($variables['node']->person_type->getValue()[$key]['target_id'] == 3){
				$variables['cigi_chair'] = true;
			}
			if($variables['node']->person_type->getValue()[$key]['target_id'] == 4){
				$variables['program_director'] = true;
			}
			if($variables['node']->person_type->getValue()[$key]['target_id'] == 5){
				$variables['student'] = true;
			}
			if($variables['node']->person_type->getValue()[$key]['target_id'] == 23){
				$variables['postdoc_fellow'] = true;
			}
			if($variables['node']->person_type->getValue()[$key]['target_id'] == 42){
				$variables['graduate'] = true;
			}
			if($variables['node']->person_type->getValue()[$key]['target_id'] == 137){
				$variables['visiting_fellow'] = true;
			}
			if($variables['node']->person_type->getValue()[$key]['target_id'] == 138){
				$variables['bsia_fellow'] = true;
			}
			if($variables['node']->person_type->getValue()[$key]['target_id'] == 158){
				$variables['board_member'] = true;
			}
		}

		$variables['program_path'] = '';

		foreach($variables['node']->program_type->getValue() as $key=>$value){
			if($variables['node']->program_type->getValue()[$key]['target_id'] == 6){
				$variables['program_url'] = '/degree-programs/joint-university-phd-in-global-governance';
			}
			elseif($variables['node']->program_type->getValue()[$key]['target_id'] == 7){
				$variables['program_url'] = '/degree-programs/masters-of-arts-in-international-public-policy';
			}
			elseif($variables['node']->program_type->getValue()[$key]['target_id'] == 8){
				$variables['program_url'] = '/degree-programs/master-arts-global-governance';
			}
		}

	}

/* Preprocess logic for event nodes */

	if($variables['node']->getType() === 'event' && $variables['view_mode'] === 'teaser' ){

		$variables['event_date'] = null;
		$variables['event_date_2'] = null;

		foreach($variables['node']->field_event_date->getValue() as $key=>$value){
			if($key == 0){
				$variables['event_date'] = $variables['node']->field_event_date->getValue()[$key]['value'];
			}
			if($key == 1){
				$variables['event_date_2'] = $variables['node']->field_event_date->getValue()[$key]['value'];
			}
		}
		
		
		$start_datetime = strtotime($variables['event_date']);
		if($variables['event_date_2'] != null){
			$end_datetime = strtotime($variables['event_date_2']);
		}
		else{
			$end_datetime = '';
		}
		
	}

	if($variables['node']->getType() === 'event'){

		global $base_url;
		$absolute_url = $base_url . \Drupal::request()->getRequestUri();
		if($title = $variables['node']->title->getValue()){
			$title = $variables['node']->title->getValue()[0]['value'];
		}
		
		$description = 'More Event Information: ' . $absolute_url;

		/* get date fields and reformat for ical */ 
		$variables['event_date'] = null;
		$variables['event_date_2'] = null;

		foreach($variables['node']->field_event_date->getValue() as $key=>$value){
			if($key == 0){
				$variables['event_date'] = $variables['node']->field_event_date->getValue()[$key]['value'];
			}
			if($key == 1){
				$variables['event_date_2'] = $variables['node']->field_event_date->getValue()[$key]['value'];
			}
		}
		
		//convert dates to integers for further comparisons
		$start_datetime = strtotime($variables['event_date']);
		$end_datetime = strtotime($variables['event_date_2']);

		/*	check if there is an end date entered and that is it different than the start date other
			otherwise assume the enddate to be the same as the start 
		*/
		if(($end_datetime < $start_datetime) || (empty($end_datetime))){
			$end_datetime = $start_datetime;
		}
	
		//set ical time formats
		$ical_start_date = format_date($start_datetime, 'custom', 'Ymd\THis', 'Etc/GMT+10');
		$ical_end_date = format_date($start_datetime, 'custom', 'Ymd\THis', 'Etc/GMT+10');

		//set a endstamp to compare in templates as a flag for showing past material
		$variables['endstamp'] = format_date($end_datetime, 'custom', 'U', 'Etc/GMT+10');
		$variables['current_datetime'] = time();

		// set dates for datemark on views/teasers
		$variables['event_month'] = format_date($start_datetime, 'custom', 'M', 'Etc/GMT+10');
		$variables['event_day'] = format_date($end_datetime, 'custom', 'd', 'Etc/GMT+10');
		$variables['event_year'] = format_date($start_datetime, 'custom', 'Y', 'Etc/GMT+10');

		/* build address from fields and return to event node template */
		$street = null;
		$city = null;
		$province_state = null;
		$country = null;

		if($variables['node']->field_address_1->getValue()){
			$street = $variables['node']->field_address_1->getValue()[0]['value'];
		}
		if($variables['node']->field_city->getValue()){
			$city = $variables['node']->field_city->getValue()[0]['value'];
		}
		if($variables['node']->field_state_province->getValue()){
			$province_state = $variables['node']->field_state_province->getValue()[0]['value'];
		}
		if($variables['node']->field_country->getValue()){
			$country = $variables['node']->field_country->getValue()[0]['value'];
		}

		$address = '';
		$addressFields = array($street, $city, $province_state, $country);
		foreach ($addressFields as $item){
			if($item != ''){
				if ($item === reset($addressFields)){ 
				$address .= $item;
				}
	        	else{
	        		$address .= ', ' . $item;
	        	}
			}
		}
		$variables['address'] = $address;

		if($variables['node']->field_location->getValue()){
			$ical_location = $variables['node']->field_location->getValue()[0]['value'] . $address;
		}
		

		$variables['google_ical'] = 'https://www.google.com/calendar/render?action=TEMPLATE&text=' . $title . '&dates=' . $ical_start_date . '/' . $ical_end_date . '&details=' . $description . '&location=' . $ical_location . '&trp=false&sprop=www.balsillieschool.ca&sprop=name:www.balsillieschool.ca&pli=1&sf=true&output=xml';
		
		if($variables['node']->field_event_management->getValue() && $variables['node']->field_email_subject->getValue()){
			$variables['event_registration_email'] = $variables['node']->field_event_management->getValue()[0]['value'] . '?subject=' . $variables['node']->field_email_subject->getValue()[0]['value'];
		}
		
		if($variables['node']->field_event_management->getValue()){
			$variables['event_registration_link'] = $variables['node']->field_event_management->getValue()[0]['value'];
		}
		if($variables['node']->field_invitation->getValue()){
			$variables['invitation_only'] = $variables['node']->field_invitation->getValue()[0]['value'];
		}
		if($variables['node']->field_rsvp->getValue()){
			$variables['rsvp'] = $variables['node']->field_rsvp->getValue()[0]['value'];
		}
		
		$variables['speakers_string'] = speakers_or_authors($variables['node']->field_speakers, $variables['node']->field_speakers_unlinked, ', ');

	}

/* Preprocess logic for publication ane external publication nodes */

	if($variables['node']->getType() === 'publication' || $variables['node']->getType() === 'external_publication'){

		$publication_type_id = null;
		if($variables['node']->publication_type->getValue()){
			$publication_type_id = $variables['node']->publication_type->getValue()[0]['target_id'];
		}
		
		if($publication_type_id != null){
			$publication_type_object = taxonomy_term_load($publication_type_id);
			$publication_type_uri = taxonomy_term_uri($publication_type_object);
			$publication_type_name = $publication_type_object->get('name')->value;

			$variables['publication_type_name'] = $publication_type_name;
			$variables['publication_type_uri'] = $publication_type_uri;
		}
		

		$variables['publication_title'] = $variables['node']->label();

		if($variables['node']->field_publication_source->getValue()){
			$variables['publication_source'] = $variables['node']->field_publication_source->getValue()[0]['value'];
		}
		if($variables['node']->field_publication_source_link->getValue()){
			$variables['publication_source_link'] = $variables['node']->field_publication_source_link->getValue()[0]['value'];
		}

		//dsm($variables['node']->field_published_date->getValue());
		if($variables['node']->field_published_date->getValue()){
			$variables['publication_date'] = $variables['node']->field_published_date->getValue()[0]['value'];
		}
		$variables['authors_string'] = speakers_or_authors($variables['node']->field_speakers, $variables['node']->field_speakers_unlinked, ', ');
	
	}

/* Preprocess logic for publication nodes */

	if($variables['node']->getType() === 'publication'){
		if($variables['view_mode'] != 'entity'){

		
		if(!empty($variables['node']->field_link_label->getValue()[0]['value'])){
			$variables['link_label'] = $variables['node']->field_link_label->getValue()[0]['value'];
		}
		else{
			$variables['link_label'] = 'Visit Website';
		}
	}
	}

 }	

function speakers_or_authors($node_speakers_linked, $node_speakers_unlinked, $divider){

	/* assemble speakers string */
	$speaker_list = array();

	//create a string from linked speakers
	foreach($node_speakers_linked->getValue() as $key=>$value){
		$speaker_object = entity_load('node', $node_speakers_linked->getValue()[$key]['target_id']);
		$speaker_path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$speaker_object->id(), 'en');
		$speaker = '<a href="' . $speaker_path . '">' . $speaker_object->label() . '</a>';
		array_push($speaker_list, $speaker);
	}
	foreach($node_speakers_unlinked->getValue() as $key=>$value){
		$unlinked_speaker = ucfirst(strtolower($node_speakers_unlinked->getValue()[$key]['value']));
		array_push($speaker_list, $unlinked_speaker);
	}

	$speaker_string = implode($divider, $speaker_list);

	return $speaker_string;
	
}


function bsia_page_attachments_alter(array &$page){
	//'Content-type: text/calendar; charset=utf-8'
	// $viewport = array(
 //      '#type' => 'html_tag',
 //      '#tag' => 'meta',
 //      '#attributes' => array(
 //        'name' => 'viewport',
 //        'content' => 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no',
 //      ),
 //    );
 //    $page['#attached']['html_head'][] = [$viewport, 'viewport'];
    //print_r($page['#attached']['html_head']);
}

?>